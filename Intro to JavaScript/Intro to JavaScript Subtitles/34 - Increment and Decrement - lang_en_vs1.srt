1
00:00:00,520 --> 00:00:02,400
With loops you often need to increase or

2
00:00:02,400 --> 00:00:06,380
decrease the value of a variable
in order to step through the loop.

3
00:00:06,380 --> 00:00:06,910
For instance,

4
00:00:06,910 --> 00:00:12,820
with this loop we're using x = x +
1 to increase the value of x by 1.

5
00:00:12,820 --> 00:00:15,250
Before it starts the next
iteration of the loop.

6
00:00:15,250 --> 00:00:18,010
With JavaScript and
many other programming languages.

7
00:00:18,010 --> 00:00:20,480
There's actually an increment operator.

8
00:00:20,480 --> 00:00:23,980
That gives you a short cut for
doing the exact same thing.

9
00:00:23,980 --> 00:00:25,640
And it is written in two different ways.

10
00:00:25,640 --> 00:00:30,287
You have x++ and you have ++x.

11
00:00:30,287 --> 00:00:34,358
X++ is actually just
the same as x = x + 1.

12
00:00:35,510 --> 00:00:39,250
However, what it is going to do
is return the original value of

13
00:00:39,250 --> 00:00:41,590
x before it increments it.

14
00:00:41,590 --> 00:00:44,800
You can read this as return
x then increments it.

15
00:00:44,800 --> 00:00:47,510
And just to show you what that means and
how that looks.

16
00:00:47,510 --> 00:00:49,890
Let's just do this over in
the JavaScript console.

17
00:00:49,890 --> 00:00:52,370
So if I was to create
a variable called x.

18
00:00:52,370 --> 00:00:53,810
And let's set it = to 0.

19
00:00:53,810 --> 00:00:56,530
If I increment it using the operator.

20
00:00:56,530 --> 00:00:57,320
It returns back 0.

21
00:00:57,320 --> 00:00:58,090
And you're like, what the heck?

22
00:00:58,090 --> 00:01:00,320
I thought it was suppose to go up by 1?

23
00:01:00,320 --> 00:01:03,530
Well, what's actually happening is
that it returns the value back to us.

24
00:01:03,530 --> 00:01:04,319
Then it increments it.

25
00:01:04,319 --> 00:01:06,710
So if we look at the value of x now.

26
00:01:06,710 --> 00:01:08,510
It's 1, so it has been incremented.

27
00:01:08,510 --> 00:01:10,500
It just sort of did it after the fact.

28
00:01:10,500 --> 00:01:13,110
Now, ++x is going to work the same way.

29
00:01:13,110 --> 00:01:15,340
It's going to increment by 1.

30
00:01:15,340 --> 00:01:18,120
But it's going to do it and
then return the value back to us.

31
00:01:18,120 --> 00:01:20,510
So if we run ++x.

32
00:01:20,510 --> 00:01:21,410
It returns back 2.

33
00:01:21,410 --> 00:01:22,830
It's incremented it.

34
00:01:22,830 --> 00:01:23,920
It's still 2 after that.

35
00:01:23,920 --> 00:01:25,880
So it just sort of does it beforehand.

36
00:01:25,880 --> 00:01:27,360
And that's the difference
between the two.

37
00:01:27,360 --> 00:01:32,070
Now you might be wondering,
when should you use one over the other?

38
00:01:32,070 --> 00:01:35,080
In many cases it doesn't really matter
which one you're going to choose.

39
00:01:35,080 --> 00:01:36,550
When we're talking about loops.

40
00:01:36,550 --> 00:01:38,810
They both increment x by 1.

41
00:01:38,810 --> 00:01:42,840
However the value it returns might be
important depending on the program that

42
00:01:42,840 --> 00:01:43,350
you're writing.

43
00:01:43,350 --> 00:01:45,770
So it's just something to keep in mind.

44
00:01:45,770 --> 00:01:47,500
Another thing you might be wondering is,

45
00:01:47,500 --> 00:01:49,840
are there other shorthand
ways of doing arithmetic?

46
00:01:49,840 --> 00:01:51,800
Can I increase something by two?

47
00:01:51,800 --> 00:01:53,150
Can I decrease something?

48
00:01:53,150 --> 00:01:54,970
Can I do like quick multiplication?

49
00:01:54,970 --> 00:01:56,270
And in fact there is.

50
00:01:56,270 --> 00:01:58,780
So I'm just going to show you a couple
of different examples of that.

51
00:01:58,780 --> 00:02:00,420
So let's create a new variable called y.

52
00:02:00,420 --> 00:02:01,690
And we'll set it equal to 5.

53
00:02:01,690 --> 00:02:03,815
And let's say we want
to subtract y by 1.

54
00:02:03,815 --> 00:02:05,285
We could do y = y- 1.

55
00:02:05,285 --> 00:02:07,455
And that's going to give us 4.

56
00:02:07,455 --> 00:02:09,965
That's going to do what we want.

57
00:02:09,965 --> 00:02:13,925
But we can also write y-- which
is the decrement operator.

58
00:02:13,925 --> 00:02:16,435
And it's going to do the same thing for
us.

59
00:02:16,435 --> 00:02:17,370
So, do y--.

60
00:02:17,370 --> 00:02:19,230
Again, this one behaves similar to ++.

61
00:02:19,230 --> 00:02:21,515
It's going to return the value back,
then decrement it.

62
00:02:21,515 --> 00:02:23,380
So we look at the value of y.

63
00:02:23,380 --> 00:02:23,900
It's now 3.

64
00:02:23,900 --> 00:02:28,240
We could also do something like --y.

65
00:02:28,240 --> 00:02:30,770
Again similar to the increment operator.

66
00:02:30,770 --> 00:02:32,400
The decrement operator
works the same way.

67
00:02:32,400 --> 00:02:36,950
Now a couple other shorthand things you
can do are multiplication and division.

68
00:02:36,950 --> 00:02:40,310
So let's create a new variable
called z and set it equal to 10.

69
00:02:40,310 --> 00:02:44,910
So if we want to multiply 10 by,
let's say, 8.

70
00:02:44,910 --> 00:02:49,145
We could say z *= 8.

71
00:02:49,145 --> 00:02:52,265
What that's going to do is it's
going to multiply the value of z by 8.

72
00:02:52,265 --> 00:02:54,045
And then reassign it back to z.

73
00:02:55,145 --> 00:02:56,755
If we do that, z is now 80.

74
00:02:56,755 --> 00:02:59,515
And we could also do the same thing for
division.

75
00:02:59,515 --> 00:03:02,320
We might say, divide it by, let's say 4.

76
00:03:02,320 --> 00:03:03,960
And that's going to give us 20.

77
00:03:03,960 --> 00:03:07,320
So, yeah, there are a lot of
shorthand ways for doing arithmetic.

78
00:03:07,320 --> 00:03:09,700
They're going to come in handy as
you continue to write longer and

79
00:03:09,700 --> 00:03:11,160
longer programs.

80
00:03:11,160 --> 00:03:12,590
And practice using them in your loops.

81
00:03:12,590 --> 00:03:17,644
So, instead of writing x = x + 1,
we can do x++.
